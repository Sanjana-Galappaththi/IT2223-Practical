//Bubble Sort 
//Repeatedly compare adjacent elements and swap if wrong order.
//Largest value "Bubbles" to the end.

Consider : 15 16 6 8 5
         
    Pass 01 :
	
        i = 1
		j = 4
    	   15 <-> 16 6 8 5  (15 < 16)
		   15 16 <-> 6 8 5  (16 > 6 )
		   15 6 16 <-> 8 5  (16 > 8 )
		   15 6 8 16 <-> 5  (16 > 5 )
		   15 6 8 5 16 
		   
	Pass 02 :
	
	    i = 2
		j = 3
	       15 <-> 6 8 5 16  (15 > 6 )
		   6 15 <-> 8 5 16  (15 > 8 )
		   6 8 15 <-> 5 16  (15 > 5 )
		   6 8 5 15 <-> 16  (15 < 16)
		   6 8 5 15 16
		   
	Pass 03 :
	
	    i = 3
		j = 2
	      6 <-> 8 5 15 16   (6 < 8 )
		  6 8 <-> 5 15 16   (8 > 5 )
		  6 5 8 15 16 
		  
	Pass 04 :
	  
	    i = 4
		j = 1
	      6 <-> 5 8 15 16   (6 > 5 )
		  5 6 8 15 16
		   

//Exersice 01:
arr = [64 34 25 12 22 11 90 ]

code :

% Bubble Sort Algorithm
arr = [64, 34, 25, 12, 22, 11, 90];  % Initial array

n = length(arr);  % Length of the array

% Bubble Sort Process
for i = 1:n-1
    for j = 1:n-i
        if arr(j) > arr(j+1)  % Compare adjacent elements
            % Swap if the element is greater than the next
            temp = arr(j);
            arr(j) = arr(j+1);
            arr(j+1) = temp;
        end
    end
end

% Display the sorted array
disp('Sorted Array:');
disp(arr);



//Insertion sort 
//Pick each element and place it in the correct position in the sorted part

 Step 01:  Start from the second element 
 Step 02: Compare it with the previous element in the sorted portion of the array.
 Step 03: Shift larger element to the right.
 step 04: Insert the current element in the correct position
 
  consider,  5 4 10 1 6 2
               start from the second element
			      2nd element is 4 
				   key = 4 
				   5 > 4
				   
				4 5    |   10 1 6 2 
			  Sorted       Unsorted 
			      
				  then, 
				   Key = 10 
				   5 > 10 (Wrong)
				   4 > 10 (Wrong)
                
                4 5 10  | 1 6 2
               Sorted      Unsorted

                   then,
                   key = 1
                   10 > 1 (correct)
                    5 > 1 (correct)
                    4 > 1 (correct)

                1 4 5 10 | 6 2
                 Sorted      Unsorted

                    then,
                   key = 6
                   10 > 6 (correct)
                   5  > 6 (wrong)
 
                1 4 5 6 10  | 2
                 Sorted        Unsorted

                    then,
                    key = 2
                  10 > 2 (correct)
                  6  > 2 (correct)
                  5  > 2 (correct)				  
                  4  > 2 (correct)				  
                  1  > 2 (wrong)

                  1 2 4 5 6 10 				  
			       
				   
code:
			   
arr=[5,4,10,1,6,2];

n=length(arr);

for i =2:n
    key=arr(i);
    j=i-1;

    while j >=1 && arr(j) > key
        arr(j+1) = arr(j);
        j = j-1;
    end

    arr(j + 1) = key;
end

disp("Insertion array:");
disp(arr);